#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@date: 28 December 2020 (update)

This source code is provided by Richard J Smith 'as is' and 'with all faults'. The provider makes no 
representations or warranties of any kind concerning the safety, suitability, inaccuracies, 
typographical errors, or other harmful components of this software.
"""

import matplotlib.pyplot as plt
import numpy as np
from pyXSteam.XSteam import XSteam

steamTable = XSteam(XSteam.UNIT_SYSTEM_MKS)

print('Rankine superheat cycle analysis - no feedwater heater in cycle')

PowerOutput = 100 #MW electrical generation
p1 = 0.2 #condenser pressure (bar)
p3 = 160 #feedwater pressure (bar)
p4 = 160 #main steam pressure (bar)

s1 = steamTable.sL_p(p1)
T1 = steamTable.t_ps(p1, s1)
h1 = steamTable.hL_p(p1)
print('\nPoint 1 - Condenser outlet before pump')
print(f"P1: {round(float(p1),1)} bar")
print(f"T1: {round(float(T1),1)} degC")
print(f"H1: {round(float(h1),1)} kJ/kg")
print(f"S1: {round(float(s1),3)} kJ/kg K")

s2 = s1
v1 = 1/steamTable.rhoL_p(p1)*100
w_p1 = v1*(p3-p1)
print(f"Work required by pump: {round(float(w_p1),2)} kJ/kg")

print('\nPoint 2 - pump outlet')
h2 = h1+w_p1
T2 = steamTable.t_ph(p3, h2)
print(f"P2: {round(float(p3),1)} bar")
print(f"T2: {round(float(T2),1)} degC")
print(f"H2: {round(float(h2),1)} kJ/kg")
print(f"S2: {round(float(s2),3)} kJ/kg K")

#p2dash = p3
v2 = 1/steamTable.rhoL_p(p3)*100

h3 = h2
s3 = steamTable.sL_p(p3)
T3 = steamTable.tsat_p(p3)
print('\nPoint 3')
print(f"P3: {round(float(p3),1)} bar")
print(f"T3: {round(float(T3),1)} degC")
print(f"H3: {round(float(h3),1)} kJ/kg")
print(f"S3: {round(float(s3),3)} kJ/kg K")

#boiler evaporator outlet before superheating conditions
h4 = steamTable.hV_p(p4)
s4 = steamTable.sV_p(p4)
T4 = T3
print('\nPoint 4')
print(f"P4: {round(float(p4),1)} bar")
print(f"T4: {round(float(T4),1)} degC")
print(f"H4: {round(float(h4),1)} kJ/kg")
print(f"S4: {round(float(s4),3)} kJ/kg K")

#turbine inlet conditions
p5 = p4
T5 = 540
h5 = steamTable.h_pt(p5, T5)
s5 = steamTable.s_pt(p5, T5)
print('\nPoint 5 - main steam conditions')
print(f"P5: {round(float(p5),1)} bar")
print(f"T5: {round(float(T5),1)} degC")
print(f"H5: {round(float(h5),1)} kJ/kg")
print(f"S5: {round(float(s5),3)} kJ/kg K")

#turbine outlet conditions
p6 = p1
s6 = s5 #assume isentropic expansion in turbine
T6 = steamTable.t_ps(p6, s6)
x6 = steamTable.x_ps(p6, s6)
h6 = steamTable.h_px(p6, x6)
print('\nPoint 6 - turbine exhaust conditions')
print(f"P6: {round(float(p6),1)} bar")
print(f"T6: {round(float(T6),1)} degC")
print(f"H6: {round(float(h6),1)} kJ/kg")
print(f"S6: {round(float(s6),3)} kJ/kg K")
print(f"x6: {round(float(x6),4)} ")

print('\nSummary')
q_H = (h5-h2)
print(f"Heat input by boiler: {round(float(q_H),1)} kJ/kg")

w_HPt = (1*(h5-h6))
print(f"Work generated by turbine: {round(float(w_HPt),1)} kJ/kg")

q_L = (h1-h6)
print(f"Heat rejected to condenser: {round(float(q_L),1)} kJ/kg")

Wnett = (h5-h6)-w_p1
print(f"Thermal efficiency is: {round(float(Wnett),1)} kJ/kg")

eta_th = Wnett/(h5-h2)*100
print(f"Thermal efficiency is: {round(float(eta_th),1)} %")

HRcycle = 3600*100/eta_th
print(f"HR rankine cycle: {round(float(HRcycle),1)} kJ/kWh")

MassFlow = PowerOutput*1000/Wnett
print(f"Required steam flow: {round(float(MassFlow),1)} kg/s")

font = {'family' : 'Times New Roman',
        'size'   : 22}

plt.figure(figsize=(15,10))
plt.title('T-s Diagram - Rankine Superheat Cycle (no feed heaters)')
plt.rc('font', **font)

plt.ylabel('Temperature (C)')
plt.xlabel('Entropy (s)')
plt.xlim(-2,10)
plt.ylim(0,600)

T = np.linspace(0, 373.945, 400) # range of temperatures
# saturated vapor and liquid entropy lines
svap = [s for s in [steamTable.sL_t(t) for t in T]]
sliq = [s for s in [steamTable.sV_t(t) for t in T]]

plt.plot(svap, T, 'b-', linewidth=2.0)
plt.plot(sliq, T, 'r-', linewidth=2.0)

plt.plot([s1, s2, s3, s4, s5, s6, s1],[T1, T2, T3, T4, T5, T6, T1], 'black', linewidth=2.0)

plt.savefig('images/05_rankine_superheat_cycle-no_heater-TSdiagram.png')

CWflow = 5000 #kg/s

QL = MassFlow * q_L*-1
print(f"Heat rejected to condenser (total): {round(float(QL),1)} kJ")

DeltaTcw = QL/(CWflow * 4.18)
print(f"Temperature increase of cooling water: {round(float(DeltaTcw),1)} Deg C")

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@date: 28 December 2020 (update)

This source code is provided by Richard J Smith 'as is' and 'with all faults'. The provider makes no 
representations or warranties of any kind concerning the safety, suitability, inaccuracies, 
typographical errors, or other harmful components of this software.
"""

import matplotlib.pyplot as plt
import numpy as np
from pyXSteam.XSteam import XSteam

steamTable = XSteam(XSteam.UNIT_SYSTEM_MKS)

print('Rankine reheat cycle analysis with 1 open feedheater')

PowerOutput = 100 #MW electrical generation
p1 = 0.2 #condenser pressure (bar)
p2 = 20 #turbine bled steam pressure (bar) and pump 1 discharge pressure (bar)
p3 = 160 #feedwater pressure (bar)
p4 = 160 #main steam pressure (bar)
T5 = 540 #superheat temperature
T7 = 540 #reheat temperature

s1 = steamTable.sL_p(p1)
T1 = steamTable.t_ps(p1, s1)
h1 = steamTable.hL_p(p1)
print('\nPoint 1')
print(f"P1: {round(float(p1),1)} bar")
print(f"T1: {round(float(T1),1)} degC")
print(f"H1: {round(float(h1),1)} kJ/kg")
print(f"S1: {round(float(s1),3)} kJ/kg K")

s2 = s1

v = 1/steamTable.rhoL_p(p1)*100
w_p1 = v*(p2-p1)
print(f"Work required by pump 1: {round(float(w_p1),2)} kJ/kg")

print('\nPoint 2')
h2 = h1+w_p1
T2 = steamTable.t_ph(p3, h2)
print(f"P2: {round(float(p2),1)} bar")
print(f"H2: {round(float(h2),1)} kJ/kg")
print(f"T2: {round(float(T2),1)} degC")

print('\nPoint 21 - feedheater outlet before pump 2')
p21 = p2
h21 = steamTable.hL_p(p2)
s21 = steamTable.sL_p(p2)
T21 = steamTable.t_hs(h21, s21)
print(f"P21: {round(float(p21),1)} bar")
print(f"T21: {round(float(T21),1)} degC")
print(f"H21: {round(float(h21),1)} kJ/kg")
print(f"S21: {round(float(s21),3)} kJ/kg K")

p22 = p3
v2 = 1/steamTable.rhoL_p(p21)*100
w_p2 = v2*(p22-p21)
print(f"Work required by pump 2: {round(float(w_p2),2)} kJ/kg")

T22 = T21
h22 = h21 + w_p2
s22 = steamTable.s_pt(p22,T22)
print('\nPoint 22 - pump 2 outlet')
print(f"P22: {round(float(p22),1)} bar")
print(f"T22: {round(float(T22),1)} degC")
print(f"H22: {round(float(h22),1)} kJ/kg")
print(f"S22: {round(float(s22),3)} kJ/kg K")

h3 = h22
s3 = steamTable.sL_p(p3)
T3 = steamTable.t_ph(p3, h3)
T3 = steamTable.tsat_p(p3)
print('\nPoint 3')
print(f"P3: {round(float(p3),1)} bar")
print(f"T3: {round(float(T3),1)} degC")
print(f"H3: {round(float(h3),1)} kJ/kg")
print(f"S3: {round(float(s3),3)} kJ/kg K")

h4 = steamTable.hV_p(p4)
s4 = steamTable.sV_p(p4)
T4 = T3
print('\nPoint 4')
print(f"P4: {round(float(p4),1)} bar")
print(f"T4: {round(float(T4),1)} degC")
print(f"H4: {round(float(h4),1)} kJ/kg")
print(f"S4: {round(float(s4),3)} kJ/kg K")

#HP turbine inlet conditions
p5 = p4
h5 = steamTable.h_pt(p5, T5)
s5 = steamTable.s_pt(p5, T5)
print('\nPoint 5 - main steam conditions')
print(f"P5: {round(float(p5),1)} bar")
print(f"T5: {round(float(T5),1)} degC")
print(f"H5: {round(float(h5),1)} kJ/kg")
print(f"S5: {round(float(s5),3)} kJ/kg K")

p6 = p2
print(f"Reheat Pressure: {round(float(p4),1)} bar")
s6 = s5
T6 = steamTable.t_ps(p6, s6)
h6 = steamTable.h_pt(p6, T6)
print('\nPoint 6')
print(f"P6: {round(float(p6),1)} bar")
print(f"T6: {round(float(T6),1)} degC")
print(f"H6: {round(float(h6),1)} kJ/kg")
print(f"S6: {round(float(s6),3)} kJ/kg K")

#LP turbine inlet conditions
p7 = p2
h7 = steamTable.h_pt(p7, T7)
s7 = steamTable.s_pt(p7, T7)
print('\nPoint 7 - IP/LP steam conditions')
print(f"P7: {round(float(p7),1)} bar")
print(f"T7: {round(float(T7),1)} degC")
print(f"H7: {round(float(h7),1)} kJ/kg")
print(f"S7: {round(float(s7),3)} kJ/kg K")

#turbine outlet conditions
p8 = p1
s8 = s7 #assume isentropic expansion in turbine
T8 = steamTable.t_ps(p8, s8)
x8 = steamTable.x_ps(p8, s8)
h8 = steamTable.h_px(p8, x8)
print('\nPoint 8 - turbine exhaust conditions')
print(f"P8: {round(float(p8),1)} bar")
print(f"T8: {round(float(T8),1)} degC")
print(f"H8: {round(float(h8),1)} kJ/kg")
print(f"S8: {round(float(s8),3)} kJ/kg K")
print(f"x8: {round(float(x8),4)} ")

#calculate heater dry saturation point for plot
p61 = p6
h61 = h6
T61 = steamTable.tsat_p(p61)
s61 = steamTable.sV_p(p61)

# differing mass flow rates at various points
m2DIVm21 = ((h21-h6)/(h2-h6))
print(f"\nfeedwater heater mass flow ratio: {round(float(m2DIVm21),4)} ")

print('\nSummary')
q_H = (h5-h22)+(h7-h6)
print(f"Heat input by boiler: {round(float(q_H),1)} kJ/kg")

q_L = (h1-h8)
print(f"Heat rejected to condenser: {round(float(q_L),1)} kJ/kg")

w_HPt = h5-h6
print(f"Work generated by HP turbine: {round(float(w_HPt),1)} kJ/kg")

w_LPt = h7-h8
print(f"Work generated by LP turbine: {round(float(w_LPt),1)} kJ/kg")
print(f"Total work output by turbine: {round(float(w_HPt+w_LPt),1)} kJ/kg")

Wnett = (h5-h6)+(m2DIVm21*(h7-h8))-w_p2-(m2DIVm21*w_p1)
print(f"Thermal efficiency is: {round(float(Wnett),1)} kJ/kg")

eta_th = Wnett/((h5-h22)+(m2DIVm21*(h7-h6)))*100
print(f"Thermal efficiency is: {round(float(eta_th),1)} %")

HRcycle = 3600*100/eta_th
print(f"HR rankine cycle: {round(float(HRcycle),1)} kJ/kWh")

MassFlow = PowerOutput*1000/Wnett
print(f"Required steam flow: {round(float(MassFlow),1)} kg/s")

MassFlowCond = PowerOutput*1000/Wnett*m2DIVm21
print(f"Steam flow to condenser: {round(float(MassFlowCond),1)} kg/s")

font = {'family' : 'Times New Roman',
        'size'   : 22}

plt.figure(figsize=(15,10))
plt.title('T-s Diagram - Rankine Reheat Cycle (1 open feed heater)')
plt.rc('font', **font)

plt.ylabel('Temperature (C)')
plt.xlabel('Entropy (s)')
plt.xlim(-2,10)
plt.ylim(0,600)

T = np.linspace(0, 373.945, 400) # range of temperatures
# saturated vapor and liquid entropy lines
svap = [s for s in [steamTable.sL_t(t) for t in T]]
sliq = [s for s in [steamTable.sV_t(t) for t in T]]

plt.plot(svap, T, 'b-', linewidth=2.0)
plt.plot(sliq, T, 'r-', linewidth=2.0)

plt.plot([s1, s2, s21, s22, s3, s4, s5, s6, s7, s8, s1],[T1, T2, T21, T22, T3, T4, T5, T6, T7, T8, T1], 'black', linewidth=2.0)
plt.plot([s6, s61, s21],[T6, T61, T21], 'green', linewidth=2.0) #feed heater line

plt.savefig('images/06_rankine_reheat_cycle-open_heater-TSdiagram.png')

CWflow = 5000 #kg/s

QL = (MassFlow* m2DIVm21) * q_L*-1
print(f"Heat rejected to condenser (total): {round(float(QL),1)} kJ")

DeltaTcw = QL/(CWflow * 4.18)
print(f"Temperature increase of cooling water: {round(float(DeltaTcw),1)} Deg C")